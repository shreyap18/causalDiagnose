% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/run_procedure.R
\name{run_procedure}
\alias{run_procedure}
\title{Get estimated causal discovery outcome rates as a function of subsample size}
\usage{
run_procedure(
  data,
  dir,
  sampsizes,
  names_col_cddr,
  name_files,
  name_out,
  fit_resid_yonx = function(x) {
     NA
 },
  predict_yonx = function(x) {
     NA
 },
  fit_resid_xony = function(x) {
     NA
 },
  predict_xony = function(x) {
     NA
 },
  run_parallel = T,
  num_cores = availableCores() - 1,
  run_causal_method = function(x) {
     NA
 },
  run_lingam = T,
  run_test = T,
  clear_files = T,
  nsubsamp = 100,
  nboot = 100,
  alpha = 0.05,
  early_stop = T,
  early_stop_count = 2,
  early_stop_thresh = 1,
  fill_rest_subsamp = F
)
}
\arguments{
\item{data}{A dataframe of size N with two columns: x and y, where x->y is the hypothesized direction}

\item{dir}{A string of the directory where want to save the csv file of estimated causal discovery outcome rates for each subsample size}

\item{sampsizes}{A vector of subsample sizes where the largest subsample size is less than equal to N}

\item{names_col_cddr}{A vector of names for each of the columns in the estimated causal discovery outcome rates dataframe}

\item{name_files}{A vector of names for the saved files for each subsample size (just the root name, such as cddr_samp)}

\item{name_out}{A vector of names for the output files corresponding to the estimated causal discovery outcome rates dataframe as well as the pvalues}

\item{fit_resid_yonx}{A function that takes in a dataframe with variable x, fits a model of choice on the data (e.g. linear regression) where y is the outcome and x is the predictor, and function outputs a list with two components: model, which is the model object, and residuals, the residuals after fitting the model on the data, default is a function that returns NA as this would only be relevant for test-based method}

\item{predict_yonx}{A function that takes in a model object (where y is the outcome and x is the predictor) and newdata with two variables x and y, gets predictions based on the model for the newdata and returns these predictions, default is a function that returns NA as this would only be relevant for test-based method}

\item{fit_resid_xony}{A function that takes in a dataframe with variable y, fits a model of choice on the data (e.g. linear regression) where x is the outcome and y is the predictor, and function outputs a list with two components: model, which is the model object, and residuals, the residuals after fitting the model on the data, default is a function that returns NA as this would only be relevant for test-based method}

\item{predict_xony}{A function that takes in a model object (where x is the outcome and y is the predictor) and newdata with two variables x and y, gets predictions based on the model for the newdata and returns these predictions, default is a function that returns NA as this would only be relevant for test-based method}

\item{run_parallel}{A logical value on whether to run items using parallel processing, default is True}

\item{num_cores}{A numeric value for the number of cores, default is availableCores()-1}

\item{run_causal_method}{A function that takes in a dataframe with two variables, x and y and returns the estimated causal ordering as a vector (e.g. c(1,2) for x->y or c(2,1) for y->x), default is a function that returns NA as this is only relevant for deterministic methods (not the test-based method)}

\item{run_lingam}{A logical value on whether to run LiNGAM method, default is True}

\item{run_test}{A logical value on whether to run test-based method, default is True}

\item{clear_files}{A logical value on whether to clear the files generated in the bootstrap procedure for each subsample size, default is True}

\item{nsubsamp}{A numeric value for S, the number of subsamples, default is 100}

\item{nboot}{A numeric value for the number of bootstrap repetitions, default is 100}

\item{alpha}{A numeric value for the alpha level (probability of type 1 error), default is 0.05}

\item{early_stop}{A logical value on whether to stop the method early for the test-based method if the rate of rejecting both directions converges to 1, default is True}

\item{early_stop_count}{A numerical value on what the threshold is to stop early (e.g after 3 subsample sizes where the rate of rejecting in both directions is 1), default is 2}

\item{early_stop_thresh}{A numerical value on what the numerical threshold is to stop early (e.g stop if the rate of rejecting in both directions is 1), default is 1}

\item{fill_rest_subsamp}{A logical value on whether to fill the rest of the subsamples with early_stop_thresh (e.g 1) when early stopping is used, default is False}
}
\value{
A dataframe of the estimated causal discovery outcome rates for each subsample size considered. Also locally saves these probabilities as well as the p-values into the corresponding name_out files
}
\description{
Get estimated causal discovery outcome rates as a function of subsample size
}
\examples{

sampsizes <- c(seq(20, 40, 10))
fit_resid_yonx <- function(data) {
  model <- lm(formula("y~x"), data = data)
  resids <- residuals(model)
  model_obs <- list(model = model, residuals = resids)
  return(model_obs)
  }
predict_yonx <- function(model, data) {
  preds <- predict(model,newdata = data)
  return(preds)
  }
fit_resid_xony <- function(data) {
  model <- lm(formula("x~y"), data = data)
  resids <- residuals(model)
  model_obs <- list(model = model, residuals = resids)
  return(model_obs)
  }
predict_xony <- function(model, data) {
  preds <- predict(model,newdata = data)
  return(preds)
  }
names_col_cddr <- c("samplesizes", "yonx_and_xony_reject",
"yonx_and_xony_noreject", "yonx_reject_xony_noreject",
"xony_reject_yonx_noreject")
main_dir <- "~/Documents/cddr_paper/package/test"
name_files <- c("cddr_samp", "p_valsxy_samp", "p_valsyx_samp")
name_out <- c("cddr_test", "p_valsxy", "p_valsyx")
cddr <- run_procedure(pop_cal, main_dir, sampsizes, names_col_cddr, name_files,
name_out, fit_resid_yonx, predict_yonx, fit_resid_xony, predict_xony)


sampsizes <- c(seq(20, 40, 10))
names_col_cddr <- c("samplesizes", "order_right", "order_left")
main_dir <- "~/Documents/cddr_paper/package/test"
name_files <- c("cddr_deter_samp")
name_out <- c("cddr_lingam")
cddr_lingam <- run_procedure(pop_cal, main_dir, sampsizes, names_col_cddr,
name_files, name_out, run_test = FALSE, early_stop_thresh = 0.95)


sampsizes <- c(seq(20, 60, 10))
names_col_cddr <- c("samplesizes", "order_right", "order_left")
main_dir <- "~/Documents/cddr_paper/package/test"
name_files <- c("cddr_deter_samp")
name_out <- c("cddr_random")
run_causal_method <- function(data){
  p <- rbinom(1, 1, p = 0.6)
    if (p == 0){
      return(c(1,2))}
   else{
      return(c(2,1))
      }}
cddr_random <- run_procedure(pop_cal, main_dir, sampsizes, names_col_cddr,name_files,
name_out, run_test = FALSE, run_lingam = FALSE, run_causal_method = run_causal_method,
early_stop_thresh = 0.95)
}
